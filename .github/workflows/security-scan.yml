name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
#  schedule:
    # Run weekly on Sunday at 00:00 UTC
#    - cron: '0 0 * * 0'

jobs:
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run security scanner on codebase
      run: |
        mkdir -p security-reports
        security-scanner scan . \
          --output security-reports/security-scan-report.json \
          --format json
        
        # Also generate HTML report for artifact
        security-scanner scan . \
          --output security-reports/security-scan-report.html \
          --format html
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: security-reports/
        retention-days: 30
    
    - name: Check for critical vulnerabilities
      id: critical-check
      run: |
        if [ -f security-reports/security-scan-report.json ]; then
          CRITICAL_COUNT=$(python -c "
          import json
          with open('security-reports/security-scan-report.json') as f:
              data = json.load(f)
          critical = [v for v in data.get('vulnerabilities', []) if v.get('severity') == 'Critical']
          print(len(critical))
          ")
          
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "Found $CRITICAL_COUNT critical vulnerabilities"
            echo "::error::Found $CRITICAL_COUNT critical security vulnerabilities"
            echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          else
            echo "No critical vulnerabilities found"
            echo "critical_count=0" >> $GITHUB_OUTPUT
          fi
        else
          echo "Security report not found"
          echo "critical_count=0" >> $GITHUB_OUTPUT
        fi
    
    - name: Fail on critical vulnerabilities
      if: steps.critical-check.outputs.critical_count > 0
      run: |
        echo "‚ùå Critical security vulnerabilities detected. Failing workflow."
        exit 1

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install safety
    
    - name: Scan dependencies for vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload dependency scan report
      uses: actions/upload-artifact@v3
      with:
        name: dependency-reports
        path: safety-report.json
        retention-days: 30

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{ matrix.language }}"

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Build container image
      run: |
        docker build -t python-security-scanner:latest .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'python-security-scanner:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'