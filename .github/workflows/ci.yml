name: CI

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run tests with pytest
      run: |
        pytest -v --cov=src/security_scanner --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/
        retention-days: 30
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run Black code formatter
      run: |
        black --check --diff src tests
    
    - name: Run isort import sorter
      run: |
        isort --check-only --diff src tests
    
    - name: Run flake8 linter
      run: |
        flake8 src tests --max-line-length=88 --extend-ignore=E203,W503,E501
    
    - name: Run mypy type checker
      run: |
        mypy src
    
    - name: Run bandit security linter
      run: |
        bandit -r src -c pyproject.toml -f json -o bandit-report.json
    
    - name: Upload bandit report
      uses: actions/upload-artifact@v3
      with:
        name: bandit-report
        path: bandit-report.json
        retention-days: 30

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package with twine
      run: |
        twine check dist/*
    
    - name: Upload distribution packages
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/
        retention-days: 30

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: Run integration tests
      run: |
        # Test CLI commands
        security-scanner --help
        security-scanner detectors
        security-scanner init --output test-config.yaml
        
        # Test scanning examples directory
        security-scanner scan examples --output integration-test-report.json --format json
        
        # Verify report was created
        if [ -f integration-test-report.json ]; then
          echo "Integration test passed: Report generated successfully"
        else
          echo "Integration test failed: No report generated"
          exit 1
        fi
    
    - name: Upload integration test artifacts
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-results
        path: |
          integration-test-report.json
          test-config.yaml
        retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test, lint, build, integration-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}