import ast
from typing import List, Dict, Any, Type
from ..detectors import (
    SQLInjectionDetector,
    XSSDetector,
    CommandInjectionDetector,
    FileInclusionDetector,
    HardcodedSecretsDetector,
    InsecureDeserializationDetector
)
from ..utils.logger import setup_logger


class VulnerabilityDetector:
    """Orchestrates all vulnerability detectors."""
    
    def __init__(self):
        self.logger = setup_logger()
        self.detectors = [
            SQLInjectionDetector(),
            XSSDetector(),
            CommandInjectionDetector(),
            FileInclusionDetector(),
            HardcodedSecretsDetector(),
            InsecureDeserializationDetector()
        ]
    
    def analyze_ast(self, tree: ast.AST, file_path: str) -> List[Dict[str, Any]]:
        """Analyze AST using all detectors."""
        vulnerabilities = []
        
        for node in ast.walk(tree):
            for detector in self.detectors:
                try:
                    detected_vulns = detector.analyze(node, file_path)
                    vulnerabilities.extend(detected_vulns)
                except Exception as e:
                    self.logger.warning(f"Detector {detector.__class__.__name__} failed: {e}")
        
        return vulnerabilities
    
    def get_available_detectors(self) -> List[str]:
        """Return list of available detector names."""
        return [detector.__class__.__name__ for detector in self.detectors]